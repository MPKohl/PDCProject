/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pdc.project.View;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.InputMismatchException;
import java.util.Scanner;
import javax.swing.*;
import javax.imageio.*;
import pdc.project.Model.*;
import pdc.project.Controller.*;
/**
 *
 * @author shanon
 */
public class GameBoardGUI extends javax.swing.JFrame {
    public static DataHolder data;
    int[] position;
    int[] startTime;
    boolean moveUp    =    false;
    boolean moveDown  =    false;
    boolean moveRight =    false;
    boolean moveLeft  =    false;
    
    /**
     * Creates new form GameBoardGUI
     */
    public GameBoardGUI(DataHolder data) {
        initComponents();
        this.data = data;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label1 = new java.awt.Label();
        label2 = new java.awt.Label();
        barHealth = new javax.swing.JProgressBar();
        barExp = new javax.swing.JProgressBar();
        btnRight = new javax.swing.JButton();
        btnUp = new javax.swing.JButton();
        btnLeft = new javax.swing.JButton();
        btnDown = new javax.swing.JButton();
        testPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtChallenge = new javax.swing.JTextArea();
        pnlChallenge = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        label1.setText("Health");

        label2.setText("Experience");

        barHealth.setForeground(new java.awt.Color(255, 0, 0));

        btnRight.setIcon(new javax.swing.ImageIcon("C:\\Users\\shanon\\Desktop\\PictureForPDC\\buttonRight.jpg")); // NOI18N
        btnRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRightActionPerformed(evt);
            }
        });

        btnUp.setIcon(new javax.swing.ImageIcon("C:\\Users\\shanon\\Desktop\\PictureForPDC\\buttonUp.jpg")); // NOI18N
        btnUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpActionPerformed(evt);
            }
        });

        btnLeft.setIcon(new javax.swing.ImageIcon("C:\\Users\\shanon\\Desktop\\PictureForPDC\\buttonLeft.jpg")); // NOI18N
        btnLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLeftActionPerformed(evt);
            }
        });

        btnDown.setIcon(new javax.swing.ImageIcon("C:\\Users\\shanon\\Desktop\\PictureForPDC\\buttonDown.jpg")); // NOI18N
        btnDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDownActionPerformed(evt);
            }
        });

        testPanel.setLayout(new java.awt.GridLayout(12, 5));

        txtChallenge.setColumns(20);
        txtChallenge.setRows(5);
        jScrollPane1.setViewportView(txtChallenge);

        pnlChallenge.setLayout(new java.awt.GridLayout(3, 3));

        jMenu1.setText("Menu");
        jMenu1.add(jSeparator1);

        jMenuItem5.setText("Unpause");
        jMenu1.add(jMenuItem5);

        jMenuItem3.setText("Pause");
        jMenu1.add(jMenuItem3);
        jMenu1.add(jSeparator2);

        jMenuItem1.setText("Save");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Load");
        jMenu1.add(jMenuItem2);
        jMenu1.add(jSeparator3);

        jMenuItem4.setText("Exit");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuBar1.add(jMenu1);

        jMenu4.setText("Inventory");
        jMenu4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu4MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu4);

        jMenu2.setText("Highscores");

        jMenuItem7.setText("View Highscores");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        jMenuItem6.setText("Save Highscore");
        jMenu2.add(jMenuItem6);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Help");
        jMenu3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu3MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(barHealth, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(74, 74, 74)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(barExp, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(testPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pnlChallenge, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnUp, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnDown, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnRight, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pnlChallenge, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnUp, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnRight, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnDown, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(testPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 483, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(barExp, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)
                    .addComponent(barHealth, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        //Code to save game goes here.
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        ViewHighscores VH1 = new ViewHighscores();
        VH1.show();
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenu3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu3MouseClicked
        GUIHelpInformation GHI1 = new GUIHelpInformation();
        GHI1.show();
    }//GEN-LAST:event_jMenu3MouseClicked

    private void jMenu4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu4MouseClicked
        ShowInventoryGUI SIG1 = new ShowInventoryGUI();
        SIG1.show();
    }//GEN-LAST:event_jMenu4MouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
    barHealth.setValue(100);
    barExp.setValue(0);
    printGUIBoard();
    GameTimer gameTimer = new GameTimer();
    gameTimer.startThread();
    try {
        Thread.sleep(0);
    } catch (InterruptedException ex) {
        Thread.currentThread().interrupt();
    }
    }//GEN-LAST:event_formWindowOpened

    private void btnUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpActionPerformed
        move(data.getBoard().reachableTiles());
        if (moveUp == true){
            data.getBoard().changePosition(position[0], position[1]-1);
            checkCurrentTile();
            printGUIBoard();
            moveUp = false;
        }
    }//GEN-LAST:event_btnUpActionPerformed

    private void btnDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDownActionPerformed
        move(data.getBoard().reachableTiles());
        if (moveDown == true){
            data.getBoard().changePosition(position[0], position[1]+1);
            checkCurrentTile();
            printGUIBoard();
            moveDown = false; //reset
        }
    }//GEN-LAST:event_btnDownActionPerformed

    private void btnLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLeftActionPerformed
        move(data.getBoard().reachableTiles());
        if (moveLeft == true){
            data.getBoard().changePosition(position[0]-1, position[1]);
            checkCurrentTile();
            printGUIBoard();
            moveLeft = false; //reset
        }
    }//GEN-LAST:event_btnLeftActionPerformed

    private void btnRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRightActionPerformed
        move(data.getBoard().reachableTiles());
        if (moveRight == true){
            data.getBoard().changePosition(position[0]+1, position[1]);
            checkCurrentTile();
            printGUIBoard();
            moveRight = false;  //resets move.
        }
    }//GEN-LAST:event_btnRightActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameBoardGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameBoardGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameBoardGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameBoardGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GameBoardGUI(data).setVisible(true);
            }
        });
    }
        //Prints entire gameboard as tile pictures, by cycling through every
        //element in the 2demensional array and adding the appropriate picture 
        //to
        public void printGUIBoard() {
        testPanel.removeAll();
        for (int i = 0 ; i < data.getBoard().getBoard()[0].length; i++){
            for (int j = 0 ;j<data.getBoard().getBoard().length; j++){
                if (data.getBoard().getPosition()[0] == j && data.getBoard().getPosition()[1] == i) {
                    if (data.getPlayer().findClass() == PlayerClass.WARRIOR) {
                        JLabel picWarrior = new JLabel(new javax.swing.ImageIcon("C:\\Users\\shanon\\Desktop\\PictureForPDC\\buttonWarrior.jpg"));
                        testPanel.add(picWarrior);
                    }
                    if (data.getPlayer().findClass() == PlayerClass.ARCHER) {
                        JLabel picArcher = new JLabel(new javax.swing.ImageIcon("C:\\Users\\shanon\\Desktop\\PictureForPDC\\buttonArcher.jpg"));
                        testPanel.add(picArcher);
                    }
                    if (data.getPlayer().findClass() == PlayerClass.WIZARD) {
                        JLabel picWizard = new JLabel(new javax.swing.ImageIcon("C:\\Users\\shanon\\Desktop\\PictureForPDC\\buttonWizard.jpg"));
                        testPanel.add(picWizard);
                    }
                }
                else if (data.getBoard().getBoard()[j][i].isVisited()) {
                    JLabel picDirt = new JLabel(new javax.swing.ImageIcon("C:\\Users\\shanon\\Desktop\\PictureForPDC\\buttonDirt.jpg"));
                    testPanel.add(picDirt); //Dirt
                }
                else if (data.getBoard().getBoard()[j][i].getType() == TileType.BLOCKED) {
                    JLabel picLava = new JLabel(new javax.swing.ImageIcon("C:\\Users\\shanon\\Desktop\\PictureForPDC\\buttonLava.jpg"));
                    testPanel.add(picLava);
                }
                else if (data.getBoard().getBoard()[j][i].getType() == TileType.CHALLENGE) {
                    JLabel picFairy = new JLabel(new javax.swing.ImageIcon("C:\\Users\\shanon\\Desktop\\PictureForPDC\\buttonFairy.jpg"));
                    testPanel.add(picFairy);//wizard tile
                }
                else {
                    JLabel picGraass = new JLabel(new javax.swing.ImageIcon("C:\\Users\\shanon\\Desktop\\PictureForPDC\\buttonGreenGrass.jpg"));
                    testPanel.add(picGraass);//grass
                }
            }
        }
        testPanel.repaint();
        testPanel.revalidate();
    }
        
        
    private void checkCurrentTile(){
        int x = data.getBoard().getPosition()[0];
        int y = data.getBoard().getPosition()[1];
        Tile tile = data.getBoard().getBoard()[x][y];
        
        // If the Tile is a challenge, execute the challenge
        if (tile.getType() == TileType.CHALLENGE){
            poseChallenge(x, y);
        }
        
        // If the Tile is an enemy, execute the combat sequence
//        else if(tile.getType() == TileType.ENEMY){
//            Enemy enemy = (Enemy) data.getBoard().getBoard()[x][y];
//
//            Combat.combatStart(enemy, data.getPlayer());
//            
//            // Inserts an empty Tile after combat is done
//            data.getBoard().getBoard()[x][y] = new EmptyTile();
//            
//            Item itemRewarded = data.getPlayer().enemyReward();
//            System.out.println("\nAt your feet a " + itemRewarded.getName() + " appears! You pick it up and put it in your Inventory.");
//        }
        
        // If the Tile is the final boss, execute combat sequence and end game afterwards
        else if(tile.getType() == TileType.BOSS){
            Boss enemy = (Boss) data.getBoard().getBoard()[x][y];
            Combat.combatStart(enemy, data.getPlayer());
            finishGame();
        }
    }
    
    public void move(Tile[] reachableTiles){
        position = data.getBoard().getPosition();
        if(!(reachableTiles[0].getType() == TileType.BLOCKED)){
            moveUp=true;
        }
        if(!(reachableTiles[1].getType() == TileType.BLOCKED)){
            moveDown=true;
        }
        if(!(reachableTiles[2].getType() == TileType.BLOCKED)){  
            moveRight=true;
        }
        if(!(reachableTiles[3].getType() == TileType.BLOCKED)){
            moveLeft=true;
        }
    }
            
    private void saveHighscore(){
        if (data.getDbController().updateHighscores()){
            txtChallenge.setText("Highscore saved succesfully.");
        } else {
            txtChallenge.setText("ERROR: Highscore not saved.");
        }
    }
    public void finishGame(){
        data.getPlayer().bossReward();
        txtChallenge.setText("You have completed the game! Well done!");
        data.getPlayer().timerReward(startTime);
        saveHighscore();
        //possible play again method.      
    }
    
    private void poseChallenge(int x, int y){
        pnlChallenge.removeAll();
        final Challenge ch = (Challenge) data.getBoard().getBoard()[x][y];
        
        txtChallenge.setText("A wizard appears before you in a flash of smoke and poses you the following riddle:");
        
        // Prints the riddle
        txtChallenge.setText(txtChallenge.getText() + "\n" + ch.getQuestion().getText());
        
        // Make a list of all possible answers and shuffle them
        ArrayList<TextOutput> answers = new ArrayList<>();
        answers.add(ch.getCorrectAnswer());
        for (TextOutput t : ch.getWrongAnswers())
            answers.add(t);
        Collections.shuffle(answers);
            
        // Prints all the options with a number for each answer
        for (TextOutput a : answers){
            final JButton aButton = new JButton(a.getText());
            aButton.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    if(aButton.getText().contains(ch.getCorrectAnswer().toString())) {
                        data.getPlayer().challengeReward();
                        txtChallenge.setText("The wizard seems pleased with your answer and raises his arms over you before fading away.");
                        txtChallenge.setText(txtChallenge.getText() + "You suddenly feel rejuvenated.");
                    }
                    else {
                        txtChallenge.setText("The wizard shakes his head and dissapears with a *BANG*!");
                    }
                    pnlChallenge.removeAll();
                    pnlChallenge.repaint();
                    pnlChallenge.revalidate();
                }
            });
            pnlChallenge.add(aButton);
        }
        //Empties the Tile so the Challenge can't be trigered again
        data.getBoard().getBoard()[x][y] = new EmptyTile();
        pnlChallenge.repaint();
        pnlChallenge.revalidate();
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar barExp;
    private javax.swing.JProgressBar barHealth;
    private javax.swing.JButton btnDown;
    private javax.swing.JButton btnLeft;
    private javax.swing.JButton btnRight;
    private javax.swing.JButton btnUp;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private javax.swing.JPanel pnlChallenge;
    private javax.swing.JPanel testPanel;
    private javax.swing.JTextArea txtChallenge;
    // End of variables declaration//GEN-END:variables
}
